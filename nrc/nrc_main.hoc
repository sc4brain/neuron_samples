/**********************************************************/
/*         IOSSIM neuron_kplus                            */
/*          nrc file loader                               */
/*                                                        */
/*	                        nebula                        */
/*			                version 0.3 (2012/06/07)      */
/**********************************************************/

objref _pc
objref _cell_list
objref _swc_list
objref _stim_list
objref _ncstim_list
objref _nc_list
objref _syn_list
objref _tspike_record, _idspike_record
objref myplot

strdef _vdata_pos


{load_file("nrngui.hoc")}
{load_file("./hoc/nrc_test/loadSwc.hoc")}
{load_file("./hoc/nrc_test/loadNrc.hoc")}

{load_file("./hoc/nrc_test/param.hoc")}


_num_cells = 0
_num_localcells = 0
_nframe = 0




proc setPlot() {
    myplot = new PlotShape()
    myplot.show(1)
    myplot.exec_menu("Shape Plot")
    flush_list.append(myplot)
    //myplot.rotate(0, 200, 0, 0.1, 0.1, 0)
}


proc savePlot() { 
    strdef command
    myplot.printfile("tmp.ps")
    
    system("pstopnm -portrait -xborder 0 -yborder 0 tmp.ps 2> /dev/null")
    //system("pstopnm -xsize 1024 -ysize 1024 -portrait -xborder 0 -yborder 0 tmp.ps")
    system("ppmtoyuvsplit tmp tmp*.ppm")
    sprint(command, "mv tmp*.ppm frames/image%05d.ppm", _nframe)
    system(command)
    _nframe = _nframe+1
}


proc listSection() { local id
	id = $1
	forall{
		printf("[RANK:%d] SECTION(%d) name=%s\n", _pc.id, id, secname())
	}
}



proc printSpike() { local i, count, rank localobj fobj, tmpmt
    if(_pc.id == 0){ printf("\n\t\ttime [ms]\t cell_id\n") }
    _pc.barrier()
    for i=0, _tspike_record.size()-1{
	printf("SPIKE : \t %f\t %d\n", _tspike_record.x[i], _idspike_record.x[i])
    }
}

proc printSpikeStat() { local nsendmax, nsend, nrecv, nrecv_useful
    nsendmax = _pc.spike_statistics(&nsend, &nrecv, &nrecv_useful)
    printf("[%d] nsendmax=%d nsend=%d nrecv=%d nrecv_useful=%d\n", _pc.id, nsendmax, nsend, nrecv, nrecv_useful)
}


proc setColor(){ local i
    for(i=0; i<_cell_list.count; i+=1){
	CellSwc[i].setValAll((i*5)%120-80)
    }
}

proc saveSectionData(){ local i,j localobj fp
    strdef filename
    fp = new File()    
    for(i=0; i<_num_cells; i=i+1){
	sprint(filename, "output/data_cell%d_t%.3f.txt", i, t)
	fp.wopen(filename)
	//fp.printf("cell %d\n", i)
	for(j=0; j<_cell_list.object(i).SectionNum; j=j+1){
	    fp.printf("%f\n", _cell_list.object(i).Dend[j].v(.5))
	}
	fp.printf("\n")
	fp.close()
    }
}

proc loadSectionData(){ local i,j localobj fp
    strdef filename
    fp = new File()
    for(i=0; i<_num_cells; i=i+1){
	sprint(filename, "output/data_cell%d_t%.3f.txt", i, t)
	fp.ropen(filename)
	for(j=0; j<_cell_list.object(i).SectionNum; j=j+1){
	    _cell_list.object(i).Dend[j].v(.5) = fp.scanvar()
	}
	fp.close()
    }
}


proc clearSectionData(){
    forall{ v(.5)=$1 }
}

proc myRotate(){ local i
    for(i=0; i<200; i+=1){
	savePlot()
	myplot.rotate(0, 256, 0, 0, i*0.02, 0)
	printf("%d\n", i)
    }
}

proc myrun(){ local i, end
    dt = 0.025
    end = 2000
    init()
    for(i=0; i<end; i+=1){
	fadvance()
	if(i%5==0){
	    //savePlot()
	    saveSectionData()
	    printf("%d / %d\n", i, end)
	}
    }
}


proc runSimulation(){ local simulationtime, start_time, modelfin_time, start_waittime, finish_time, finish_waittime, finish_sendtime, finish_steptime, save_result_step
    
    simulationtime = $1
    save_result_step = $2
    dt = DT
        
    _pc.barrier()
    start_time = _pc.time
    start_waittime = _pc.wait_time
    if(_pc.id == 0){ printf("[calculation start]\n") }
    _pc.psolve(simulationtime)
    _pc.barrier()
    if(_pc.id == 0){ printf("[calculation finished]\n") }

    finish_time = _pc.time
    finish_waittime = _pc.wait_time()
    finish_steptime = _pc.step_time()
    finish_sendtime = _pc.send_time()
    
    _pc.barrier()
    if(_pc.id == 0){
	printf("\n[Process=%d, Thread=%d]\n", _pc.nhost, _pc.nthread)
	printf(" * NSTEP=%d (STOPTIME=%f / dt=%f)\n", STOPTIME/dt, STOPTIME, dt)
	printf(" * step=%f sec, wait=%f sec, send=%f sec\n", finish_steptime, finish_waittime-start_waittime, finish_sendtime)
	printf(" * core time : %f sec\n", finish_time-start_time)
    }
    _pc.barrier()    
}

proc loadSimulation(){

}


proc printSectionInfo() { local i localobj sref
    for(i=0; i<_pc.nhost; i=i+1){
		_pc.barrier()
		if(_pc.id==i){
			forall {
				sref = new SectionRef()
				if(sref.has_parent != 1){
					//printf("[RANK=%d] SECNAME %s (root)\n", _pc.id, secname())
				}else{
					//printf("[RANK=%d] SECNAME %s -> %s\n", _pc.id, secname(), "has parent")
				}
				//print secname()
				//psection()
			}
		}
    }
}

proc parallelQuit(){
	_pc.barrier()
	_pc.runworker()
	_pc.done()
	quit()
}

proc main(){local i, start_modeling, finish_modeling
    _pc = new ParallelContext()
    _pc.nthread(NTHREAD)

    start_modeling = _pc.time
    if(_pc.id == 0){ printf("[LOADING NRC FILE]\n") }

    
	strdef NRC_FILENAME_TEMPLATE
	NRC_FILENAME_TEMPLATE = "./hoc/nrc/cell%d_split%d_syn%d/rank%d.nrc"
	if(USE_FILENAME_TEMPLATE==1){
		sprint(NRC_FILENAME, NRC_FILENAME_TEMPLATE, NCELL, SPLIT, NSYNAPSE, _pc.id)
	}
    if(loadNrc(NRC_FILENAME) < 0){
		parallelQuit()
	}
     
    _pc.set_maxstep(10)
    
    // setup spike exchange method
	if(SPIKE_COMPRESS==1){
		_pc.spike_compress(1)
	}else if(SPIKE_COMPRESS==2){
		_pc.spike_compress(0, 1, 1)
	}
    _pc.barrier()

	//printSectionInfo()
    _pc.multisplit()

    stdinit()
    
    _pc.barrier()
    finish_modeling = _pc.time
    if(_pc.id == 0){ printf(" * modeling time : %f sec\n", finish_modeling - start_modeling) }

    if(SHOW_PLOT == 1){ setPlot() }
    if(RUN_SIMULATION == 1){
		runSimulation(STOPTIME, SAVE_RESULT_STEP)
		if(PRINT_SPIKE == 1){
			printSpike()
			_pc.barrier()
			printSpikeStat()
		}
    }
    
    if(RESULT_TO_MOVIE){
		loadSimulation()
    }
    
    if(QUIT == 1){
		parallelQuit()
    }

}


main()

{setuptime = startsw()}

// normal run on 1 processor does not split
// use -c split=1 to split if one processor
// use -c split=n to stop after setup showing how the cell is split
//   probably also want -c maxfactor = .3/n in that case
if (!name_declared("split")) { execute("split = 0") }
if (!name_declared("model")) { execute("model = 4") }
if (!name_declared("CELL_NO")) { execute("CELL_NO=0") }
if (split != 0) {
    maxfactor = .3/split
}



{load_file("nrngui.hoc")}
{load_file("netparmpi.hoc")}
{load_file("trajec.hoc")}
objref pc, pnm
pnm = new ParallelNetManager(1)
pc = pnm.pc
{load_file("multisplit.hoc")}
{load_file("perf.hoc")}


load_file("modeldb/LAL-VPC/CellTemplate_BN_662_Parallel.hoc")
load_file("modeldb/LAL-VPC/CellTemplate_BN_692_Parallel.hoc")
load_file("modeldb/LAL-VPC/CellTemplate_BN_1006_Parallel.hoc")
load_file("modeldb/LAL-VPC/CellTemplate_BN_1056_Parallel.hoc")
load_file("modeldb/LAL-VPC/CellTemplate_UN_969_Parallel.hoc")
load_file("modeldb/LAL-VPC/CellTemplate_UN_970_Parallel.hoc")
load_file("modeldb/LAL-VPC/CellTemplate_UN_1062_Parallel.hoc")

load_file("../nrc/loadSwc.hoc")

// initialize
tstop = 100
//pc.nthread(4)


if (pc.id == 0) {
	printf("###############################################################\n")
	printf("#nhost     = %d\n", pc.nhost)
	printf("#split     = %d\n", split)
}

chk_mcomplex()

/*
proc poirazi() {
	load_file("modeldb/CA1_multi/experiment/spike-train-attenuation/bpap.hoc")
	multisplit()
	add_trajec("soma", 0)
	add_trajec("apical_dendrite", 46)
	add_trajec("apical_dendrite", 71)
}
proc lazar() {
	load_file("modeldb/ca3_2002/ca3_paper.hoc")
	multisplit()
	add_trajec("soma")
	cvode_active(0)
}
proc miyasho() {
	load_file("modeldb/prknj/purkinje.hoc")
	tstop = 500
	multisplit()
	add_trajec("soma")
	add_trajec("SpinyDendrite", 0)
}
*/
objref cell

proc mycell() {
	//load_file("modeldb/my_cell/my_cell.hoc")
	//load_file("modeldb/LAL-VPC/top_BN_1056.hoc")
	
	if (CELL_NO == 1006) {
		cell = new Cell_BN_1006(0, 0, 0, 1)
	} else if (CELL_NO == 1056) {
		cell = new Cell_BN_1056(0, 0, 0, 1)
	} else if (CELL_NO == 662) {
		cell = new Cell_BN_662(0, 0, 0, 1)
	} else if (CELL_NO == 692) {
		cell = new Cell_BN_692(0, 0, 0, 1)
	} else if (CELL_NO == 1062) {
		cell = new Cell_UN_1062(0, 0, 0, 1)
	} else if (CELL_NO == 969) {
		cell = new Cell_UN_969(0, 0, 0, 1)
	} else if (CELL_NO == 970) {
		cell = new Cell_UN_970(0, 0, 0, 1)
	} else {
		print "CELL_NO error"
		execerror("stop", "")
	}
	print "cell created ", CELL_NO
	
	// debug
	//forall( printf("(%f, %f, %f) -> (%f, %f, %f)\n", x3d(0), y3d(0), z3d(0), x3d(1), y3d(1), z3d(1)))
	//quit()

	//add_trajec("soma")
}

proc myswc() {	
	cell = new CellSwc("../swc/1056.swc", 0, 0, 0)
	
	// debug
	//forall( printf("(%f, %f, %f) -> (%f, %f, %f)\n", x3d(0), y3d(0), z3d(0), x3d(1), y3d(1), z3d(1)))
	//quit()

	printf("section num = %d\n", cell.SectionNum)
	//printf("section num = %d\n", CellSwc[0].SectionNum)


}



proc printSectionInfo() { local i
    for(i=0; i<pc.nhost; i=i+1){
		pc.barrier()
		if(pc.id==i){
			printf(" * RANK=%d\n", pc.id)
			forall {
				printf("RANK=%d SECTION ", pc.id)
				print secname()
				//psection()
			}
		}
    }
}

proc makeSwc(){ local i localobj sl, sref, sref_root
    //if(section_exists(Cell_BN_1056[0].dend[2])){
    //if(issection(Cell_BN_1056[0].dend[2])==1){
    for(i =0; i<pc.nhost; i=i+1){
	pc.barrier()
	if(pc.id==i){
	    strdef root
	    forall{
		sref_root = new SectionRef()
		if(!sref_root.has_parent){
		    root = secname()
		    //access Cell_BN_1056[0].dend[2]
		    printf("%d : SWC(%s) : %s %f %f %f %f Cell_BN_1056[0].dend[-1]\n", pc.id, root, secname(), x3d(0), y3d(0), z3d(0), diam3d(0))
		    printf("%d : SWC(%s) : %s %f %f %f %f %s\n", pc.id, root, secname(), x3d(1), y3d(1), z3d(1), diam3d(1), secname())
		    sl = new SectionList()
		    sl.wholetree()
		    //push_section(root)
		    forsec sl{			
			secname() sref = new SectionRef()
			if(sref.has_parent){
			    printf("%d : SWC(%s) : %s %f %f %f %f ", pc.id, root, secname(), x3d(1), y3d(1), z3d(1), diam3d(1))
			    sref.parent{ printf("%s\n", secname()) }
			}
		    }
		    //pop_section()
		}
	    }
	    //topology()
	}
    }
    
    pc.barrier()
	for(i=0; i<pc.nhost; i=i+1){
		if(pc.id==i){ forall{ psection() } }
	}
}


proc printSplitInfo() { local i
	if( section_exists("Dend", 0, CellSwc[0]) == 1 ){
		printf("EXISTS %d, %d\n", 0, pc.id)
		printf("EXISTS %d, %d\n", 1, pc.id)
	}
	pc.barrier()
	for(i=1; i < CellSwc[0].SectionNum; i+=1){
		pc.barrier()
		if( section_exists("Dend", i, CellSwc[0]) == 1 ){
			printf("EXISTS %d, %d\n", i+1, pc.id)
		}
	}

}

proc dorun() {
    
    runtime = startsw()
    statrun(tstop)
    runtime = startsw() - runtime
    if (pc.id == 0) { printf("#runtime   = %g\n", runtime) }
    pc.barrier()

    for i=0, pc.nhost-1 {
		pc.barrier()
		if (pc.id == i) {
			printf("#%5d time %10g %10g %10g %5g\n", pc.id, pc.step_time(), pc.vtransfer_time(1), pc.vtransfer_time(2), cplx)
		}
    }
    if (pc.id == 0) { printf("#\n") }
    print_trajec()

    //printSectionInfo()
    //makeSwc()

    printSplitInfo()


    pc.runworker()
    getstat()
    
    
    pc.done()
    perf2file()
    quit()
}


/*
for i=0, pc.nhost-1 {
	pc.barrier()
	if(i==pc.id) {
		pc.multisplit()
	}
}
*/
if (model==4){
	mycell()
}else if(model==5){
	myswc()
}
pc.barrier()
multisplit()

if (split > 1) {
	load_file("pltsplit.hoc")
//	execerror("stop", "")
}
pc.barrier()
{pc.multisplit()}

{pc.set_maxstep(100)}
setuptime = startsw() - setuptime
pc.barrier()
if (pc.id == 0) {
	printf("#\n")
	printf("#setuptime = %g\n", setuptime)
}

objref sref
strdef parent_name
strdef root_name
/*
forall{
	sref = new SectionRef()
	sref.root { root_name = secname() }
	if(sref.has_parent == 1){
		sref.parent { parent_name = secname() }
	}else{
		parent_name = "no"
	}
	printf("[%d] nchild[%d] -> %s -> %s --> %s\n", pc.id, sref.nchild, secname(), parent_name, root_name)
}

access CellSwc[0].Dend[1946]
sref = new SectionRef()
while(sref.has_parent==1){
	printf("%s -> ", secname())
	access sref.parent
	sref = new SectionRef()
}
*/
dorun()

